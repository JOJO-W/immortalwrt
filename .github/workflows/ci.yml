name: Build ImmortalWRT

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:
env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: immortalwrt-23.05
  FEEDS_CONF: feeds.conf.default
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.TOKEN }}
jobs:
  build:
    runs-on: ubuntu-latest
#使用github的模块
    steps:
    - name: Checkout code
      uses: actions/checkout@main

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libncurses5-dev gawk git subversion libssl-dev gettext zlib1g-dev file python3

    - name: Clone ImmortalWRT
      run: |
        git clone https://github.com/JOJO-W/immortalwrt.git
        cd immortalwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Configure build
      run: |
        cd immortalwrt
        make defconfig
  #cp ./config.example .config  # 使用预定义的配置文件，你可以根据需要更改这一步    或者配置.sh文件添加插件的源码 并修改.config文件->再用make编译！(make是根据.config文件来确定要编译的东西的！)
        
    - name: 编译固件
      id: compile
      run: |
        cd immortalwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: 检查磁盘空间
      if: (!cancelled())
      run: df -hT

    - name: 上传 bin 文件夹
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: immortalwrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: immortalwrt/bin

    - name: 整理固件文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd immortalwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: immortalwrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H.%M")" >> ${GITHUB_OUTPUT}
        touch release.txt
        echo "
        💻 架构: x86-64

        📂 源码: ${{ env.REPO_URL }}

        🌳 分支: ${{ env.REPO_BRANCH }}

        ⏱️ 编译时间: $(date +"%Y年%m月%d日%H时%M分")

        🌐 管理地址: 10.0.0.1 , 子网掩码: 255.255.252.0

        👤 用户名: root

        🔒 密码: 空 
        
        " >> release.txt
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: 自动发布固件到 Releases
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

#    - name: TG推送
#      run: curl "https://api2.pushdeer.com/message/push?pushkey=${{ secrets.PUSHDEER_TOKEN }}&text=【Github Actions】AutoBuild-immortalwrt-x86 打包成功"

    - name: 删除运行记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 1
        token: ${{ env.GITHUB_TOKEN }}

    - name: 删除自动发布的旧固件
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 1
        delete_tags: true
